/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vistas;



import com.toedter.calendar.JDateChooser;
import persistencia.alumnoData;
import entidades.Alumno;
import persistencia.miConexion;
import java.util.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import javax.swing.JOptionPane;
        


/**
 * @author Grupo10 Altamirano Karina Gianfranco Antonacci Matías Bequis Marcos
 * Ezequiel Dave Natalia Quiroga Dorzan Alejo
 */

public class VistaGestionAlumno extends javax.swing.JInternalFrame {

    private alumnoData aluData;
    private Alumno alumnoActual = null;
    private miConexion conexion;
    
    /**
     * Creates new form VistaGestionAlumno
     */
    public VistaGestionAlumno() {
        initComponents();
        
        // Inicializar la conexión y alumnoData dentro del constructor
        try {
            conexion = new miConexion("url", "usuario", "password");
            aluData = new alumnoData(conexion);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al conectar con la base de datos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorioInterno = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtDni = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnMostrarTodos = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        chboxEstado = new javax.swing.JCheckBox();
        jcFechaNac = new com.toedter.calendar.JDateChooser();
        btnNuevo = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Gestion de alumnos");
        setPreferredSize(new java.awt.Dimension(760, 540));

        escritorioInterno.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID:");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Apellido:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("DNI:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Fecha nacimiento:");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "DNI", "Fecha de nacimiento", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Seleccionar alumno para borrar");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Listado de alumnos");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnMostrarTodos.setText("Mostrar Todos");
        btnMostrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodosActionPerformed(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Mostrar todos los alumnos ");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Estado:");

        chboxEstado.setForeground(new java.awt.Color(204, 204, 204));
        chboxEstado.setText("Alunmo Activo");
        chboxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chboxEstadoActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        escritorioInterno.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(txtId, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(txtNombre, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(txtApellido, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(txtDni, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(btnBuscar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(btnAgregar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(btnEliminar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(btnModificar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(btnMostrarTodos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(chboxEstado, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(jcFechaNac, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioInterno.setLayer(btnNuevo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout escritorioInternoLayout = new javax.swing.GroupLayout(escritorioInterno);
        escritorioInterno.setLayout(escritorioInternoLayout);
        escritorioInternoLayout.setHorizontalGroup(
            escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioInternoLayout.createSequentialGroup()
                .addContainerGap(207, Short.MAX_VALUE)
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6))
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnMostrarTodos))
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btnEliminar)))
                .addGap(229, 229, 229))
            .addGroup(escritorioInternoLayout.createSequentialGroup()
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(btnModificar)
                        .addGap(36, 36, 36)
                        .addComponent(btnAgregar)
                        .addGap(40, 40, 40)
                        .addComponent(btnNuevo))
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(escritorioInternoLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(btnBuscar)))
                                    .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jcFechaNac, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtDni, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))
                            .addGroup(escritorioInternoLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(chboxEstado)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioInternoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        escritorioInternoLayout.setVerticalGroup(
            escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioInternoLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))
                    .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar))
                        .addGap(57, 57, 57)))
                .addGap(7, 7, 7)
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(escritorioInternoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chboxEstado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnModificar)
                    .addComponent(btnNuevo))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMostrarTodos)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(escritorioInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(btnEliminar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorioInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorioInterno)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
        if(txtDni.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI para realizar la búsqueda.");
            return;
        }
        
        Integer dni = Integer.parseInt(txtDni.getText());
        alumnoActual = aluData.buscarAlumnoPorDni(dni);
        
        if(alumnoActual != null){
            txtApellido.setText(alumnoActual.getApellido());
            txtNombre.setText(alumnoActual.getNombre());
            chboxEstado.setSelected(alumnoActual.getEstado());
            LocalDate lc = alumnoActual.getFechaNac();
            java.util.Date date = java.util.Date.from(lc.atStartOfDay(ZoneId.systemDefault()).toInstant());
            jcFechaNac.setDate(date);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró ningún alumno con el DNI ingresado.");
        }
        
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido (solo números).");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage());
            e.printStackTrace();
    }
    

            
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void chboxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chboxEstadoActionPerformed
        try {
        if (alumnoActual == null) {
            JOptionPane.showMessageDialog(this, "No hay ningún alumno seleccionado.");
            chboxEstado.setSelected(false); 
            return;
        }
        
        boolean nuevoEstado = chboxEstado.isSelected();
        
        alumnoActual.setEstado(nuevoEstado);
        
        aluData.actualizarAlumno(alumnoActual);
        
        String mensaje = nuevoEstado ? "Alumno activado exitosamente." : "Alumno desactivado exitosamente.";
        JOptionPane.showMessageDialog(this, mensaje);
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cambiar el estado del alumno: " + e.getMessage());
            e.printStackTrace();
        chboxEstado.setSelected(!chboxEstado.isSelected());
    }		
		
    }//GEN-LAST:event_chboxEstadoActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        limpiarCampos();
        alumnoActual=null; 
                
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try{
            Integer dni= Integer.parseInt(txtDni.getText());
            String nombre=txtNombre.getText();
            String apellido=txtApellido.getText();
            if(nombre.isEmpty()|| apellido.isEmpty()){
                JOptionPane.showMessageDialog(this, "No pueden haber campos sin datos.");
                return;
            }
            java.util.Date sfecha =jcFechaNac.getDate();
            if(sfecha == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha de nacimiento.");
                return;
            }
            LocalDate fechaNac=sfecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Boolean estado=chboxEstado.isSelected();
            
            if (alumnoActual== null){
                alumnoActual=new Alumno(dni,apellido,nombre,fechaNac,estado);
                aluData.guardarAlumno(alumnoActual);
                
            }else{
                alumnoActual.setDni(dni);
                alumnoActual.setApellido(apellido);
                alumnoActual.setNombre(nombre);
                alumnoActual.setFechaNac(fechaNac);
                //aluData.actualizarAlumno(alumnoActual);
            }
                    
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido");
        }
        
        
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try{
            if(txtDni.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El DNI no puede estar vacío.");
            return;
            }
            Integer dni= Integer.parseInt(txtDni.getText());
            String nombre=txtNombre.getText();
            String apellido=txtApellido.getText();
            if(nombre.isEmpty()|| apellido.isEmpty()){
                JOptionPane.showMessageDialog(this, "No pueden haber campos sin datos.");
                return;
            }
            java.util.Date sfecha =jcFechaNac.getDate();
            if(sfecha == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha de nacimiento.");
            return;
        }
            LocalDate fechaNac=sfecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Boolean estado=chboxEstado.isSelected();
            
            if (alumnoActual == null) {
                JOptionPane.showMessageDialog(this, "No hay ningún alumno seleccionado para modificar.");
                return;
            }
            
            alumnoActual.setDni(dni);
            alumnoActual.setApellido(apellido);
            alumnoActual.setNombre(nombre);
            alumnoActual.setFechaNac(fechaNac);
            alumnoActual.setEstado(estado);

            aluData.actualizarAlumno(alumnoActual);
        
            JOptionPane.showMessageDialog(this, "Alumno actualizado exitosamente.");
        
        
            limpiarCampos();
            alumnoActual = null;
        
        } catch(NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido (solo números).");
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnMostrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodosActionPerformed

    try {
        ArrayList<Alumno> listaAlumnos = aluData.listarAlumnos();
        
        if (listaAlumnos == null || listaAlumnos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay alumnos registrados en la base de datos.");
            return;
        }
        
        String[] columnas = {"ID", "Nombre", "Apellido", "DNI", "Fecha Nacimiento", "Estado"};
        Object[][] datos = new Object[listaAlumnos.size()][6];
        
        for (int i = 0; i < listaAlumnos.size(); i++) {
            Alumno alumno = listaAlumnos.get(i);
            datos[i][0] = alumno.getIdAlumno();
            datos[i][1] = alumno.getNombre();
            datos[i][2] = alumno.getApellido();
            datos[i][3] = alumno.getDni();
            datos[i][4] = alumno.getFechaNac().toString();
            datos[i][5] = alumno.getEstado() ? "Activo" : "Inactivo";
        }
        
        javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(datos, columnas) {
            
        };
        
        jTable1.setModel(modelo);
        
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setRowSelectionAllowed(true);
        jTable1.setColumnSelectionAllowed(false);
        
        
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);  // ID
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(120);  // DNI
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(120); // Nombre
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(80); // Apellido
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(100); // Fecha
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(80);  // Estado
        
        JOptionPane.showMessageDialog(this, "Se cargaron " + listaAlumnos.size() + " alumnos en la tabla.");
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los alumnos: " + e.getMessage());
            e.printStackTrace();
        } 

    }//GEN-LAST:event_btnMostrarTodosActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
        int filaSeleccionada = jTable1.getSelectedRow();
        
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un alumno de la tabla para eliminar.");
            return;
        }
        
        int idAlumno = (Integer) jTable1.getValueAt(filaSeleccionada, 0);
        String nombreAlumno = (String) jTable1.getValueAt(filaSeleccionada, 2);
        String apellidoAlumno = (String) jTable1.getValueAt(filaSeleccionada, 3);
        
        int confirmacion = JOptionPane.showConfirmDialog(
            this, 
            "¿Está seguro que desea eliminar al alumno " + nombreAlumno + " " + apellidoAlumno + "?\n" +
            "El estado se cambiará a INACTIVO.",
            "Confirmar eliminación",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );
        
        if (confirmacion == JOptionPane.YES_OPTION) {
            ArrayList<Alumno> listaAlumnos = aluData.listarAlumnos();
            Alumno alumnoAEliminar = null;
            
            for (Alumno alumno : listaAlumnos) {
                if (alumno.getIdAlumno() == idAlumno) {
                    alumnoAEliminar = alumno;
                    break;
                }
            }
            
            if (alumnoAEliminar != null) {
                alumnoAEliminar.setEstado(false);
                
                aluData.actualizarAlumno(alumnoAEliminar);
                
                btnMostrarTodosActionPerformed(null);
                
                JOptionPane.showMessageDialog(this, "Alumno eliminado exitosamente (estado cambiado a INACTIVO).");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo encontrar el alumno seleccionado.");
            }
        }
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el alumno: " + e.getMessage());
            e.printStackTrace();     
    }//GEN-LAST:event_btnEliminarActionPerformed
    
    }     
    
    
    public int getId() {
        return Integer.parseInt(txtId.getText());
    }
    
    
     private void limpiarCampos(){
        txtId.setText("");
        txtDni.setText("");
        txtApellido.setText("");
        txtNombre.setText("");
        jcFechaNac.setDate(null);
        chboxEstado.setSelected(false);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnMostrarTodos;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JCheckBox chboxEstado;
    private javax.swing.JDesktopPane escritorioInterno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JDateChooser jcFechaNac;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

   
}
